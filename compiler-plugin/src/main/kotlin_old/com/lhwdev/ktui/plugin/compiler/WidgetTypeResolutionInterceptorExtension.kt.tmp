package com.lhwdev.ktui.compilerPlugin

import org.jetbrains.kotlin.descriptors.ModuleDescriptor
import org.jetbrains.kotlin.descriptors.SourceElement
import org.jetbrains.kotlin.descriptors.annotations.AnnotationDescriptorImpl
import org.jetbrains.kotlin.descriptors.annotations.Annotations
import org.jetbrains.kotlin.descriptors.findClassAcrossModuleDependencies
import org.jetbrains.kotlin.descriptors.impl.AnonymousFunctionDescriptor
import org.jetbrains.kotlin.extensions.internal.TypeResolutionInterceptorExtension
import org.jetbrains.kotlin.name.ClassId
import org.jetbrains.kotlin.psi.KtElement
import org.jetbrains.kotlin.psi.KtLambdaExpression
import org.jetbrains.kotlin.resolve.descriptorUtil.module
import org.jetbrains.kotlin.types.KotlinType
import org.jetbrains.kotlin.types.TypeUtils
import org.jetbrains.kotlin.types.expressions.ExpressionTypingContext
import org.jetbrains.kotlin.types.typeUtil.replaceAnnotations


@Suppress("INVISIBLE_REFERENCE", "EXPERIMENTAL_IS_NOT_ENABLED")
@UseExperimental(org.jetbrains.kotlin.extensions.internal.InternalNonStableExtensionPoints::class)
class WidgetTypeResolutionInterceptorExtension : TypeResolutionInterceptorExtension {
	override fun interceptFunctionLiteralDescriptor(expression: KtLambdaExpression, context: ExpressionTypingContext, descriptor: AnonymousFunctionDescriptor): AnonymousFunctionDescriptor {
//		if(context.expectedType.annotations.hasAnnotation(WIDGET))
//			context.trace.record() // TODO: later use it to lint
		log("Hello from WidgetTypeResolutionInterceptorExtension")
		log(descriptor.name)
//		log(context.scope.ownerDescriptor.module.resolveTopLevelClass(WIDGET, NoLookupLocation.FROM_BACKEND)!!)
		if(context.expectedType.annotations.isWidget()) {
			log("Intercepted the type resolution of ${descriptor.name}")
			log("before: " + descriptor.extensionReceiverParameter)
//			descriptor.setExtensionReceiverParameter(context.scope.ownerDescriptor.module.resolveTopLevelClass(BUILD_SCOPE, NoLookupLocation.FROM_BACKEND)!!.thisAsReceiverParameter)
			return descriptor
		}
		return descriptor
	}
	
	override fun interceptType(element: KtElement, context: ExpressionTypingContext, resultType: KotlinType): KotlinType {
		if(resultType === TypeUtils.NO_EXPECTED_TYPE) return resultType
		if(element !is KtLambdaExpression) return resultType
		log(resultType)
		
		// TODO: lint
		if(context.expectedType.annotations.isWidget())
			return resultType.makeWidgetType(context.scope.ownerDescriptor.module)
		
		return resultType
	}
	
}


fun KotlinType.makeWidgetType(module: ModuleDescriptor): KotlinType {
	log("makeWidgetType: $arguments")
	if(isWidget()) return this
	
	return replaceAnnotations(Annotations.create(annotations + AnnotationDescriptorImpl(module.findClassAcrossModuleDependencies(
		ClassId.topLevel(WIDGET)
	)!!.defaultType, emptyMap(), SourceElement.NO_SOURCE)))
}
