package com.lhwdev.ktui.compilerPlugin

import org.jetbrains.kotlin.descriptors.CallableDescriptor
import org.jetbrains.kotlin.descriptors.ConstructorDescriptor
import org.jetbrains.kotlin.descriptors.FunctionDescriptor
import org.jetbrains.kotlin.descriptors.PropertyDescriptor
import org.jetbrains.kotlin.extensions.internal.CallResolutionInterceptorExtension
import org.jetbrains.kotlin.incremental.components.LookupLocation
import org.jetbrains.kotlin.name.Name
import org.jetbrains.kotlin.psi.KtExpression
import org.jetbrains.kotlin.resolve.calls.CallResolver
import org.jetbrains.kotlin.resolve.calls.CandidateResolver
import org.jetbrains.kotlin.resolve.calls.context.BasicCallResolutionContext
import org.jetbrains.kotlin.resolve.calls.model.MutableResolvedCall
import org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionMutableResolvedCall
import org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCall
import org.jetbrains.kotlin.resolve.calls.model.VariableAsFunctionResolvedCallImpl
import org.jetbrains.kotlin.resolve.calls.tasks.TracingStrategy
import org.jetbrains.kotlin.resolve.calls.tower.ImplicitScopeTower
import org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference.ResolutionKind
import org.jetbrains.kotlin.resolve.scopes.ResolutionScope
import org.jetbrains.kotlin.resolve.calls.tower.NewResolutionOldInference.MyCandidate as Candidate


fun WidgetCandidate(candidate: Candidate): Candidate {
	val (eagerDiagnostics, resolvedCall) = candidate
	
	if(resolvedCall !is VariableAsFunctionMutableResolvedCall) {
		@Suppress("UNCHECKED_CAST")
		return Candidate(
			eagerDiagnostics = eagerDiagnostics,
			resolvedCall = WidgetResolvedCall(resolvedCall),
			finalDiagnosticsComputation = null
		)
	}
	
	val functionCall = WidgetResolvedCall(resolvedCall.functionCall)
	
	val variableCall = resolvedCall.variableCall
	
	val newCall = VariableAsFunctionResolvedCallImpl(functionCall, variableCall)
	
	return Candidate(
		eagerDiagnostics = eagerDiagnostics,
		resolvedCall = newCall,
		finalDiagnosticsComputation = null
	)
}

@Suppress("UNCHECKED_CAST")
class WidgetResolvedCall<T : CallableDescriptor>(
	private val underlying: MutableResolvedCall<T>
) : MutableResolvedCall<T> by underlying {
	private val widgetCandidateDescriptor =
		when(val descriptor = underlying.candidateDescriptor) {
			is FunctionDescriptor -> WidgetFunctionDescriptor(descriptor)
			is PropertyDescriptor -> WidgetPropertyDescriptorImpl(descriptor)
			else -> error("Expected FunctionDescriptor or PropertyDescriptor, found $descriptor")
		}
	
	override fun getCandidateDescriptor(): T = widgetCandidateDescriptor as T
	override fun getResultingDescriptor(): T {
		return when(val descriptor = underlying.resultingDescriptor) {
			is FunctionDescriptor -> WidgetFunctionDescriptor(descriptor)
			is PropertyDescriptor -> WidgetPropertyDescriptorImpl(descriptor)
			else -> error("Expected FunctionDescriptor or PropertyDescriptor, found $descriptor")
		} as T
	}
}


@Suppress("INVISIBLE_REFERENCE", "EXPERIMENTAL_IS_NOT_ENABLED")
@UseExperimental(org.jetbrains.kotlin.extensions.internal.InternalNonStableExtensionPoints::class)
class WidgetCallResolutionInterceptorExtension : CallResolutionInterceptorExtension {
	override fun interceptCandidates(candidates: Collection<Candidate>, context: BasicCallResolutionContext, candidateResolver: CandidateResolver, callResolver: CallResolver?, name: Name, kind: ResolutionKind, tracing: TracingStrategy): Collection<Candidate> {
		val widgets = mutableListOf<Candidate>()
		val nonWidgetsNonConstructors = mutableListOf<Candidate>()
		val alreadyInterceptedCandidates = mutableListOf<Candidate>()
		val constructors = mutableListOf<Candidate>()
		
		var needToLookupBuildContext = false
		
		for(candidate in candidates) {
			val resolvedCall = candidate.resolvedCall
			val candidateDescriptor = resolvedCall.candidateDescriptor
			when {
				candidateDescriptor is WidgetFunctionDescriptor -> {
					alreadyInterceptedCandidates.add(candidate)
				}
				resolvedCall is VariableAsFunctionResolvedCall &&
					resolvedCall.variableCall
						.candidateDescriptor
						.type
						.isWidget() -> {
					needToLookupBuildContext = true
					widgets.add(candidate)
				}
				resolvedCall.candidateDescriptor.annotations.isWidget() -> {
					needToLookupBuildContext = true
					widgets.add(candidate)
				}
				resolvedCall.candidateDescriptor is ConstructorDescriptor -> {
					needToLookupBuildContext = true
					constructors.add(candidate)
				}
				else -> nonWidgetsNonConstructors.add(candidate)
			}
		}
		
		if(!needToLookupBuildContext) return candidates
		
		return nonWidgetsNonConstructors +
			constructors +
			alreadyInterceptedCandidates +
			widgets.map { WidgetCandidate(it) }
	}
	
	override fun interceptCandidates(candidates: Collection<FunctionDescriptor>,
		scopeTower: ImplicitScopeTower,
		resolutionContext: BasicCallResolutionContext,
		resolutionScope: ResolutionScope,
		callResolver: CallResolver?,
		name: Name,
		location: LookupLocation
	): Collection<FunctionDescriptor> {
		val element = resolutionContext.call.callElement as KtExpression
//		val project = element.project
		if(callResolver == null) throw IllegalArgumentException("Call resolver must be non-null")
		
		if(candidates.isEmpty()) return candidates
//		val bindingContext = resolutionContext.trace.bindingContext
//		val call = resolutionContext.call
//		val shouldIgnore = bindingContext[
//			ComposeWritableSlices.IGNORE_WIDGET_INTERCEPTION,
//			call
//		] ?: false

//		if (shouldIgnore) return candidates
		
		val widgets = mutableListOf<FunctionDescriptor>()
//		val nonWidgetsNonConstructors = mutableListOf<FunctionDescriptor>()
		val nonWidgets = mutableListOf<FunctionDescriptor>()
//		val constructors = mutableListOf<ConstructorDescriptor>()
		
		var needToLookupBuildScope = false
		
		for(candidate in candidates) {
			when {
				candidate.isWidget() -> {
					needToLookupBuildScope = true
					widgets.add(candidate)
				}
//				candidate is ConstructorDescriptor -> {
//					needToLookupBuildContext = true
//					constructors.add(candidate)
//				}
				else -> nonWidgets.add(candidate)
			}
		}
		
		// If none of the candidates are widget or constructors, then it's unnecessary for us
		// to do any work at all, since it will never be anything we intercept
		if(!needToLookupBuildScope) return candidates
		
		// If there are no constructors, then all of the candidates are either widgets or
		// non-widget functions, and we follow normal resolution rules.
//		if (constructors.isEmpty()) {
//			// we wrap the widget descriptors into a WidgetFunctionDescriptor so we know
//			// to intercept it in the backend.
//			return nonWidgetsNonConstructors + widgets.map {
//				WidgetFunctionDescriptor(it)
//			}
//		}

//		if (!isInWidgetScope(resolutionContext)) return candidates

//		val buildContextType = callResolver.findBuildContextCallAndDescriptor(resolutionContext)
//			?: return nonWidgetsNonConstructors + constructors
//		val buildContextType = resolutionContext.scope.ownerDescriptor.module.resolveTopLevelClass(BUILD_CONTEXT)!!.defaultType

//		val psiFactory = KtPsiFactory(project, markGenerated = false)
		
		// If we made it this far, we need to check and see if the constructors qualify as emit
		// calls instead of constructor calls.  First, we need to look at the buildContext to see
		// what kinds of "emittables" it accepts.
		// We cache the metadata into a writeable slice based on the descriptor
//		val buildContextMetadata = BuildContextMetadata.getOrBuild(
//			buildContextType,
//			callResolver,
//			psiFactory,
//			resolutionContext
//		)
//
//		val emittables = constructors.filter {
//			buildContextMetadata.isEmittable(it.returnType) && !it.returnType.isAbstract()
//		}
//		val hasEmittableCandidate = emittables.isNotEmpty()
//
//		// if none of the constructors are emittables, then all of the candidates are valid
//		if (!hasEmittableCandidate) {
//			return nonWidgetsNonConstructors + constructors + widgets.map {
//				WidgetFunctionDescriptor(it)
//			}
//		}
//
//		// since some of the constructors are emittables, we fall back to resolving using the
//		// emit resolver.
//		val emitResolver = ComposeEmitResolver(
//			callResolver,
//			project,
//			buildContextMetadata
//		)
//
//		val emitCandidates = emitResolver.resolveCandidates(
//			call,
//			emittables,
//			name,
//			resolutionContext
//		)
		
		return nonWidgets +
			widgets.map {
				WidgetFunctionDescriptor(it)
			}
	}

//	private fun CallResolver.resolveReceiver(
//		type: KotlinType,
//		context: BasicCallResolutionContext
//	): OverloadResolutionResults<CallableDescriptor> {
//		val temporaryForVariable = TemporaryTraceAndCache.create(
//			context,
//			"trace to resolve variable",
//			context.call.callElement as KtExpression
//		)
//		val call = makeCall(context.call.callElement)
//		val contextForVariable = BasicCallResolutionContext.create(
//			context.replaceTraceAndCache(temporaryForVariable),
//			call,
//			CheckArgumentTypesMode.CHECK_VALUE_ARGUMENTS,
//			DataFlowInfoForArgumentsImpl(context.dataFlowInfo, call)
//		)
////		contextForVariable.trace.record(
////			ComposeWritableSlices.IGNORE_WIDGET_INTERCEPTION,
////			call,
////			true
////		)
//
//		return computeTasksAndResolveCall<CallableDescriptor>(
//			contextForVariable,
//			,
//			TracingStrategy.EMPTY,
//			NewResolutionOldInference.ResolutionKind.Variable
//		)
//	}

//	private fun CallResolver.resolveBuildContext(context: BasicCallResolutionContext):
//		ResolvedCall<CallableDescriptor>? {
//
//		// The buildContext is currently resolved as whatever is currently in scope with the name "buildContext".
//		val resolvedBuildContext = resolveVar(, context)
//
//		if (!resolvedBuildContext.isSuccess) {
//			return null
//		}
//
//		return resolvedBuildContext.resultingCall
//	}

//	private fun CallResolver.findBuildContextCallAndDescriptor(
//		context: BasicCallResolutionContext
//	): KotlinType? {
//		// use the call resolver to find any variable that would resolve with "buildContext" in scope.
//		return resolveBuildContext(context)?.resultingDescriptor?.returnType
//		// If there is no buildContext in scope, then we decide to fall back to the ViewBuildContext
//		// as a default. When we are properly inferring the buildContext type, this step should no
//		// longer be needed. This provides a better developer experience currently though since
//		// developers won't be required to import the buildContext into scope.
//			?: context
//				.scope
//				.ownerDescriptor
//				.module
//				.findClassAcrossModuleDependencies(ClassId.topLevel(BUILD_CONTEXT))
//				?.defaultType
//	}
}
